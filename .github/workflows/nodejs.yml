name: Node.js CI & Tests

on:
  # Roda em qualquer push para qualquer branch
  push: {}
  # Roda em pull requests que têm a branch "main" como alvo
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm' # Adiciona cache para acelerar a instalação
    - name: Install dependencies
      run: npm install
    - name: Rodar os testes de API via Controller
      run: npm run test-rest-controller

  e2e-test:
    # Este job só roda se o job 'test' for bem-sucedido
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install dependencies
      run: npm install

    - name: Subir a API Rest
      run: node src/server.js &

    - name: Subir a API GraphQL
      run: node src/server-graphql.js &

    - name: Esperar as APIs estarem funcionando
      # Usa um comando mais robusto para esperar as APIs responderem, em vez de um 'sleep' fixo.
      # Tenta por até 30 segundos.
      run: |
        npm install --global wait-on
        wait-on http://localhost:3000/api-docs/ http-get://localhost:4000/.well-known/apollo/server-health --timeout 60000

    - name: Criar .env para testes E2E
      run: |
        echo "BASE_URL_REST=http://localhost:3000" >> .env
        echo "BASE_URL_GRAPHQL=http://localhost:4000" >> .env

    - name: Rodar os testes E2E da API Rest
      run: npm run test-rest-external

    - name: Rodar os testes E2E da API GraphQL
      run: npm run test-graphql-external
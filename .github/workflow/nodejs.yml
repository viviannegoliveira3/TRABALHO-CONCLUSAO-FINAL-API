name: Testes de CI
name: Node.js CI & Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Rodar os testes de API via Controller
    - name: Run Controller Tests
      run: npm run test-rest-controller

    - name: Subir a API Rest 
    - name: Start REST API
      run: npm run start-rest &

    - name: Subir a API GraphQL 
    - name: Start GraphQL API
      run: npm run start-graphql &

    - name: Esperar as APIs estarem Funcionando
      run: sleep 8
    - name: Wait for APIs to be ready
      # Use wait-on para esperar que as portas estejam respondendo antes de continuar.
      # Adicione `wait-on` às suas devDependencies: npm install --save-dev wait-on
      # Se suas URLs/portas forem diferentes, ajuste os valores abaixo.
      run: npx wait-on http://localhost:3000 http://localhost:4000

    - name: Criar .env
    - name: Create .env file for external tests
      run: |
        echo "BASE_URL_REST=${{ secrets.BASE_URL_REST }}" >> .env
        echo "BASE_URL_GRAPHQL=${{ secrets.BASE_URL_GRAPHQL }}" >> .env
        echo "BASE_URL_REST=http://localhost:3000" >> .env
        echo "BASE_URL_GRAPHQL=http://localhost:4000/graphql" >> .env

    - name: Rodar os testes External de API Rest via HTTP
    - name: Run External REST API Tests
      run: npm run test-rest-external

    - name: Rodar os testes External de API GraphQL via HTTP
    - name: Run External GraphQL API Tests
      run: npm run test-graphql-external

    - name: Publish Test Results
      # Esta etapa publica um resumo dos resultados dos testes.
      # Requer que seu test runner (ex: Jest) gere um relatório JUnit.
      # Exemplo de script no package.json: "test:ci": "jest --reporters=jest-junit"
      # Você precisaria executar `npm run test:ci` em vez dos scripts de teste individuais.
      uses: dorny/test-reporter@v1
      if: success() || failure() # Executa mesmo se os testes falharem
      with:
        name: Test Results
        path: junit.xml # Caminho para o relatório de teste gerado
        reporter: jest-junit # Formato do relatório
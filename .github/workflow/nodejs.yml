name: Node.js CI & Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "criando-pipeline" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Start REST API
      run: npm start &

    - name: Start GraphQL API
      run: npm run start-graphql &

    - name: Wait for APIs to be ready
      # Aguarda as APIs estarem prontas antes de rodar os testes.
      run: npx wait-on http://localhost:3000 http://localhost:4000/graphql --timeout 60000

    - name: Create .env file for tests
      run: |
        echo "BASE_URL_REST=http://localhost:3000" >> .env
        echo "BASE_URL_GRAPHQL=http://localhost:4000/graphql" >> .env

    - name: Run all tests and generate report
      # Executa o script de CI que roda todos os testes e gera o relatório junit.xml
      run: npm run test:ci

    - name: Publish Test Results
      # Publica um resumo dos resultados na aba "Checks" do Pull Request.
      uses: dorny/test-reporter@v1
      if: success() || failure() # Executa mesmo se os testes falharem
      with:
        name: Mocha Tests
        path: junit.xml # Caminho para o relatório de teste gerado pelo Mocha
        reporter: mocha-junit # Formato do relatório